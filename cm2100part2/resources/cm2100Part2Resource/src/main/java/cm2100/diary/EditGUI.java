/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cm2100.diary;

import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/* EditGUI.java, created by Vladimir B.
*  Assessment Part 2 â€“ due 13 Jan 2020 */
@SuppressWarnings("ALL")
public class EditGUI extends javax.swing.JFrame {

    /**
     * Main GUI
     */
    GUI gui;
    /**
     * Captured description
     */
    String capDesc;
    /**
     * Captured start date
     */
    String capStartDate;
    /**
     * Captured monthBox2 index
     */
    int capMonthBox2Index;
    /**
     * Captured dayBox index
     */
    int capDayBoxIndex;
    /**
     * Captured boolean if repeat box is selected
     */
    boolean capRepCheck;
    /**
     * Captured repeat type index
     */
    int capRepIndex;
    /**
     * Captured endYear text
     */
    String capEndYear;
    /**
     * Captured endMonthBox index
     */
    int capEndMonthBoxIndex;
    /**
     * Captured endDayBox index
     */
    int capEndDayBoxIndex;
    /**
     * Captured boolean if timed box is selected
     */
    boolean capTimedCheck;
    /**
     * Captured startHour
     */
    int capStartHour;
    /**
     * Captured startMin
     */
    int capStartMin;
    /**
     * Captured endHour
     */
    int capEndHour;
    /**
     * Captured endMin
     */
    int capEndMin;

    /**
     * Creates new form NewAppGUI
     */
    public EditGUI(GUI g) {
        initComponents();
        gui = g;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        desc = new javax.swing.JLabel();
        descText = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        yearText = new javax.swing.JTextField();
        monthBox2 = new javax.swing.JComboBox<>();
        dayBox = new javax.swing.JComboBox<>();
        repeatCheck = new javax.swing.JCheckBox();
        repeatType = new javax.swing.JLabel();
        repeatBox = new javax.swing.JComboBox<>();
        endDateLabel = new javax.swing.JLabel();
        endText = new javax.swing.JTextField();
        endMonthBox = new javax.swing.JComboBox<>();
        endDayBox = new javax.swing.JComboBox<>();
        timedCheck = new javax.swing.JCheckBox();
        startLabel = new javax.swing.JLabel();
        startHour = new javax.swing.JComboBox<>();
        dots = new javax.swing.JLabel();
        startMin = new javax.swing.JComboBox<>();
        endLabel = new javax.swing.JLabel();
        endHour = new javax.swing.JComboBox<>();
        dots2 = new javax.swing.JLabel();
        endMin = new javax.swing.JComboBox<>();
        editButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Appointment");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        desc.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        desc.setForeground(new java.awt.Color(0, 0, 0));
        desc.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        desc.setText("Description:");

        descText.setBackground(new java.awt.Color(204, 204, 204));
        descText.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        descText.setForeground(new java.awt.Color(0, 0, 0));

        dateLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(0, 0, 0));
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dateLabel.setText("Date:");

        yearText.setBackground(new java.awt.Color(204, 204, 204));
        yearText.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        yearText.setForeground(new java.awt.Color(0, 0, 0));
        yearText.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        monthBox2.setBackground(new java.awt.Color(51, 51, 51));
        monthBox2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        monthBox2.setForeground(new java.awt.Color(204, 204, 204));
        monthBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov" }));

        dayBox.setBackground(new java.awt.Color(51, 51, 51));
        dayBox.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dayBox.setForeground(new java.awt.Color(204, 204, 204));
        dayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        repeatCheck.setBackground(new java.awt.Color(102, 102, 102));
        repeatCheck.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        repeatCheck.setForeground(new java.awt.Color(0, 0, 0));
        repeatCheck.setText("Repeat");
        repeatCheck.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        repeatCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatCheckActionPerformed(evt);
            }
        });

        repeatType.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        repeatType.setForeground(new java.awt.Color(0, 0, 0));
        repeatType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        repeatType.setText("Repeat Type:");

        repeatBox.setBackground(new java.awt.Color(51, 51, 51));
        repeatBox.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        repeatBox.setForeground(new java.awt.Color(204, 204, 204));
        repeatBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Weekly", "Yearly" }));
        repeatBox.setEnabled(false);

        endDateLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endDateLabel.setForeground(new java.awt.Color(0, 0, 0));
        endDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        endDateLabel.setText("End Date:");

        endText.setBackground(new java.awt.Color(204, 204, 204));
        endText.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endText.setForeground(new java.awt.Color(0, 0, 0));
        endText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        endText.setEnabled(false);

        endMonthBox.setBackground(new java.awt.Color(51, 51, 51));
        endMonthBox.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endMonthBox.setForeground(new java.awt.Color(204, 204, 204));
        endMonthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov" }));
        endMonthBox.setToolTipText("");
        endMonthBox.setEnabled(false);

        endDayBox.setBackground(new java.awt.Color(51, 51, 51));
        endDayBox.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endDayBox.setForeground(new java.awt.Color(204, 204, 204));
        endDayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        endDayBox.setEnabled(false);

        timedCheck.setBackground(new java.awt.Color(102, 102, 102));
        timedCheck.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        timedCheck.setForeground(new java.awt.Color(0, 0, 0));
        timedCheck.setText("Timed");
        timedCheck.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        timedCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timedCheckActionPerformed(evt);
            }
        });

        startLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        startLabel.setForeground(new java.awt.Color(0, 0, 0));
        startLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        startLabel.setText("Start Time:");

        startHour.setBackground(new java.awt.Color(51, 51, 51));
        startHour.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        startHour.setForeground(new java.awt.Color(204, 204, 204));
        startHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        startHour.setEnabled(false);

        dots.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dots.setForeground(new java.awt.Color(0, 0, 0));
        dots.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dots.setText(":");

        startMin.setBackground(new java.awt.Color(51, 51, 51));
        startMin.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        startMin.setForeground(new java.awt.Color(204, 204, 204));
        startMin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        startMin.setEnabled(false);

        endLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endLabel.setForeground(new java.awt.Color(0, 0, 0));
        endLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        endLabel.setText("End Time:");

        endHour.setBackground(new java.awt.Color(51, 51, 51));
        endHour.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endHour.setForeground(new java.awt.Color(204, 204, 204));
        endHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        endHour.setEnabled(false);

        dots2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dots2.setForeground(new java.awt.Color(0, 0, 0));
        dots2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dots2.setText(":");

        endMin.setBackground(new java.awt.Color(51, 51, 51));
        endMin.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        endMin.setForeground(new java.awt.Color(204, 204, 204));
        endMin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        endMin.setEnabled(false);

        editButton.setBackground(new java.awt.Color(0, 0, 0));
        editButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        editButton.setForeground(new java.awt.Color(204, 204, 204));
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(204, 204, 204));
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(endLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timedCheck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(repeatCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(desc, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descText)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(monthBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(repeatType, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(repeatBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(endHour, javax.swing.GroupLayout.Alignment.LEADING, 0, 74, Short.MAX_VALUE)
                            .addComponent(endText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startHour, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dots2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endMin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dots, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startMin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(endMonthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(endDayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dayBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthBox2)
                        .addComponent(dateLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(repeatCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(repeatType)
                        .addComponent(repeatBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endMonthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDayBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timedCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dots, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startMin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endHour, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dots2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2)))
                .addGap(54, 54, 54))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Enables other components for editting if repeat box is checked
     *
     * @param evt repeatCheck selection
     */
    private void repeatCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatCheckActionPerformed
        // TODO add your handling code here:

        if (repeatCheck.isSelected()) {
            repeatBox.setEnabled(true);
            endText.setEnabled(true);
            endMonthBox.setEnabled(true);
            endDayBox.setEnabled(true);
        } else {
            repeatBox.setEnabled(false);
            endText.setEnabled(false);
            endMonthBox.setEnabled(false);
            endDayBox.setEnabled(false);
        }
    }//GEN-LAST:event_repeatCheckActionPerformed

    /**
     * Enables other components for editting if timed box is checked
     *
     * @param evt timedCheck selection
     */
    private void timedCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timedCheckActionPerformed
        // TODO add your handling code here:

        if (timedCheck.isSelected()) {
            startHour.setEnabled(true);
            startMin.setEnabled(true);
            endHour.setEnabled(true);
            endMin.setEnabled(true);
        } else {
            startHour.setEnabled(false);
            startMin.setEnabled(false);
            endHour.setEnabled(false);
            endMin.setEnabled(false);
        }
    }//GEN-LAST:event_timedCheckActionPerformed

    /**
     * Closes the GUI
     *
     * @param evt Button pressed
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Removes the old appointment, creates a new one and adds it to the
     * calendar
     *
     * @param evt Button pressed
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        int v = JOptionPane.showConfirmDialog(rootPane, "Appointment update. Save changes?");
        //JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
        if (v == 0) {
            this.removeAppointment();

            //JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
            this.addAppointment();

            //JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
            this.setVisible(false);
        } else if (v == 2) {
            this.setVisible(false);
        }

    }//GEN-LAST:event_editButtonActionPerformed
    /**
     * Initializes the variables when GUI opens
     *
     * @param evt GUI opens
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        capDesc = descText.getText();
        capStartDate = yearText.getText();
        capMonthBox2Index = monthBox2.getSelectedIndex();
        capDayBoxIndex = dayBox.getSelectedIndex();
        capRepCheck = repeatCheck.isSelected();
        capRepIndex = repeatBox.getSelectedIndex();
        capEndYear = endText.getText();
        capEndMonthBoxIndex = endMonthBox.getSelectedIndex();
        capEndDayBoxIndex = endDayBox.getSelectedIndex();
        capTimedCheck = timedCheck.isSelected();
        capStartHour = startHour.getSelectedIndex();
        capStartMin = startMin.getSelectedIndex();
        capEndHour = endHour.getSelectedIndex();
        capEndMin = endMin.getSelectedIndex();
    }//GEN-LAST:event_formWindowOpened

    //---------------------------------------Gettters---------------------------------------------
    /**
     * Gets DescText
     *
     * @return JTextfiled
     */
    public JTextField getDescText() {
        return descText;
    }

    /**
     * Gets yearText
     *
     * @return yearText
     */
    public JTextField getYearText() {
        return yearText;
    }

    /**
     * Gets month Box
     *
     * @return monthBox
     */
    public JComboBox getMonthBox() {
        return monthBox2;
    }

    /**
     * Gets dayBox
     *
     * @return dayBox
     */
    public JComboBox getDayBox() {
        return dayBox;
    }

    /**
     * Gets repeatCheck
     *
     * @return repeatCheck
     */
    public JCheckBox getRepeatCheck() {
        return repeatCheck;
    }

    /**
     * Gets repeatBox
     *
     * @return repeatBox
     */
    public JComboBox getRepeatBox() {
        return repeatBox;
    }

    /**
     * Gets endText
     *
     * @return endText
     */
    public JTextField getEndText() {
        return endText;
    }

    /**
     * Gets endMonthBox
     *
     * @return endMonthBox
     */
    public JComboBox getEndMonthBox() {
        return endMonthBox;
    }

    /**
     * Gets endDayBox
     *
     * @return endDayBox
     */
    public JComboBox getEndDayBox() {
        return endDayBox;
    }

    /**
     * Gets timedCheck
     *
     * @return timedCheck
     */
    public JCheckBox getTimedCheck() {
        return timedCheck;
    }

    /**
     * Gets startHour
     *
     * @return startHour
     */
    public JComboBox getStartHour() {
        return startHour;
    }

    /**
     * Gets startMin
     *
     * @return startMin
     */
    public JComboBox getStartMin() {
        return startMin;
    }

    /**
     * Gets endHour
     *
     * @return endHour
     */
    public JComboBox getEndHour() {
        return endHour;
    }

    /**
     * Gets endMin
     *
     * @return endMin
     */
    public JComboBox getEndMin() {
        return endMin;
    }

    /**
     * Mehod to remove appointment from diary and getAllDates
     */
    public void removeAppointment() {

        if (capRepCheck) {

            if (capTimedCheck) {

                //Creating appointment that is going to be used to search for the other same appointment 
                int startYear = Integer.parseInt(capStartDate);
                int startMonth = capMonthBox2Index;
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = capDayBoxIndex;
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating endDate
                int endYear = Integer.parseInt(capEndYear);
                int endMonth = capEndMonthBoxIndex;
                if (endMonth == 0) {
                    endMonth = 12;
                }
                int endDay = capEndDayBoxIndex;
                endDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(endYear, endMonth) < endDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + endMonth + "/" + endYear);
                    this.setVisible(false);
                }

                Date endDate = new Date(endYear, endMonth, endDay);

                //Creating startTime
                int startHourBox = capStartHour;
                int startMinuteBox = capStartMin;

                Time startTime = new Time(startHourBox, startMinuteBox);

                //Creating endTime
                int endHourBox = capEndHour;
                int endMinBox = capEndMin;

                Time endTime = new Time(endHourBox, endMinBox);

                //Creating RepeatType
                int repIndex = capRepIndex;
                RepeatType rep;
                if (repIndex == 0) {
                    rep = RepeatType.DAILY;
                } else if (repIndex == 1) {
                    rep = RepeatType.WEEKLY;
                } else {
                    rep = RepeatType.YEARLY;
                }

                //Creating appointment
                TimedRepeatAppointment app = new TimedRepeatAppointment(capDesc, startDate, endDate, startTime, endTime, rep);

                //Editing values
                //JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
                //JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                for (Date c : app.getDates()) {
                    Appointment app2 = new UntimedAppointment(app.toString(), c);
                    gui.getAllDates().remove(app2);
                    //JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                    gui.getDiary().getStore().remove(app);
                    //JOptionPane.showMessageDialog(rootPane, gui.getDiary());
                }
                //JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
                //JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                gui.removeFromCalendar();
                gui.getListModel().removeElement(app);

            } else {

                //Creating appointment that is going to be used to search for the other same appointment for it to be deleted
                int startYear = Integer.parseInt(capStartDate);
                int startMonth = capMonthBox2Index;
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = capDayBoxIndex;
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating endDate
                int endYear = Integer.parseInt(capEndYear);
                int endMonth = capEndMonthBoxIndex;
                if (endMonth == 0) {
                    endMonth = 12;
                }
                int endDay = capEndDayBoxIndex;
                endDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(endYear, endMonth) < endDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + endMonth + "/" + endYear);
                    this.setVisible(false);
                }

                Date endDate = new Date(endYear, endMonth, endDay);

                //Creating RepeatType
                int repIndex = capRepIndex;
                RepeatType rep;
                if (repIndex == 0) {
                    rep = RepeatType.DAILY;
                } else if (repIndex == 1) {
                    rep = RepeatType.WEEKLY;
                } else {
                    rep = RepeatType.YEARLY;
                }

                //Creating appointment
                UntimedRepeatAppointment app = new UntimedRepeatAppointment(capDesc, startDate, endDate, rep);

                //Editing values
                /*
                JOptionPane.showMessageDialog(rootPane, "Diary: ");
                JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
                
                JOptionPane.showMessageDialog(rootPane, "getAllDates : ");
                JOptionPane.showMessageDialog(rootPane, gui.getAllDates());

                JOptionPane.showMessageDialog(rootPane, "RepeatAppointment that is going to be used to search for the other");
                JOptionPane.showMessageDialog(rootPane, app);
                 */
                for (Date c : app.getDates()) {

                    UntimedAppointment app2 = new UntimedAppointment(app.toString(), c);
                    /*
                        JOptionPane.showMessageDialog(rootPane, "Untimed appointment to be removed from getAllDates");
                        JOptionPane.showMessageDialog(rootPane, app2);
                     */

                    gui.getAllDates().remove(app2);
                    /*
                        JOptionPane.showMessageDialog(rootPane, "getAllDates after removal");
                        JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                     */

                    //JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                    /*
                        JOptionPane.showMessageDialog(rootPane, "RepeatAppointment that is going to be removed from diary");
                        JOptionPane.showMessageDialog(rootPane, app);
                     */
                    gui.getDiary().getStore().remove(app);

                    /*
                        JOptionPane.showMessageDialog(rootPane, "Diary after removal");
                        JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
                        //JOptionPane.showMessageDialog(rootPane, gui.getDiary());
                     */
                }
                /*
                JOptionPane.showMessageDialog(rootPane, "Diary after removal: ");
                JOptionPane.showMessageDialog(rootPane, gui.getDiary().getStore());
                
                JOptionPane.showMessageDialog(rootPane, "getAllDates after removal: ");
                JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                 */
                gui.removeFromCalendar();
                gui.getListModel().removeElement(app);

            }
        } else {
            if (capTimedCheck) {

                //Creating startDate
                int startYear = Integer.parseInt(capStartDate);
                int startMonth = capMonthBox2Index;
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = capDayBoxIndex;
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating startTime
                int startHourBox = capStartHour;
                int startMinuteBox = capStartMin;

                Time startTime = new Time(startHourBox, startMinuteBox);

                //Creating endTime
                int endHourBox = capEndHour;
                int endMinBox = capEndMin;

                Time endTime = new Time(endHourBox, endMinBox);

                TimedAppointment app = new TimedAppointment(capDesc, startDate, startTime, endTime);

                Appointment app2 = new UntimedAppointment(app.toString(), startDate);
                gui.getAllDates().remove(app2);
                gui.getDiary().getStore().remove(app);
                gui.removeFromCalendar();
                gui.getListModel().removeElement(app);

            } else {

                int startYear = Integer.parseInt(capStartDate);
                int startMonth = capMonthBox2Index;
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = capDayBoxIndex;
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                UntimedAppointment app = new UntimedAppointment(capDesc, startDate);

                gui.getAllDates().remove(app);
                gui.getDiary().getStore().remove(app);
                gui.removeFromCalendar();
                gui.getListModel().removeElement(app);

            }
        }
    }

    /**
     * Method to add appoitment to diary and getAllDates
     */
    public void addAppointment() {

        //Adding
        if (repeatCheck.isSelected()) {

            if (timedCheck.isSelected()) {

                //Creating startDate
                int startYear = Integer.parseInt(yearText.getText());
                int startMonth = monthBox2.getSelectedIndex();
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = dayBox.getSelectedIndex();
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating endDate
                int endYear = Integer.parseInt(endText.getText());
                int endMonth = endMonthBox.getSelectedIndex();
                if (endMonth == 0) {
                    endMonth = 12;
                }
                int endDay = endDayBox.getSelectedIndex();
                endDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(endYear, endMonth) < endDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + endMonth + "/" + endYear);
                    this.setVisible(false);
                }

                Date endDate = new Date(endYear, endMonth, endDay);

                //Creating startTime
                int startHourBox = startHour.getSelectedIndex();
                int startMinuteBox = startMin.getSelectedIndex();

                Time startTime = new Time(startHourBox, startMinuteBox);

                //Creating endTime
                int endHourBox = endHour.getSelectedIndex();
                int endMinBox = endMin.getSelectedIndex();

                Time endTime = new Time(endHourBox, endMinBox);

                //Creating RepeatType
                int repIndex = repeatBox.getSelectedIndex();
                RepeatType rep;
                if (repIndex == 0) {
                    rep = RepeatType.DAILY;
                } else if (repIndex == 1) {
                    rep = RepeatType.WEEKLY;
                } else {
                    rep = RepeatType.YEARLY;
                }
                //Creating appointment
                TimedRepeatAppointment app = new TimedRepeatAppointment(descText.getText(), startDate, endDate, startTime, endTime, rep);

                for (Date c : app.getDates()) {
                    Appointment app2 = new UntimedAppointment(app.toString(), c);
                    gui.getAllDates().add(app2);
                    //JOptionPane.showMessageDialog(rootPane, gui.getAllDates());
                    gui.getDiary().add(app);
                    //JOptionPane.showMessageDialog(rootPane, gui.getDiary());
                }
                //gui.getDiary().add(app);
                //JOptionPane.showMessageDialog(rootPane, gui.getDiary());
                gui.addToCalendar(app);
                gui.getListModel().addElement(app);

            } else {

                //Creating startDate
                int startYear = Integer.parseInt(yearText.getText());
                int startMonth = monthBox2.getSelectedIndex();
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = dayBox.getSelectedIndex();
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating endDate
                int endYear = Integer.parseInt(endText.getText());
                int endMonth = endMonthBox.getSelectedIndex();
                if (endMonth == 0) {
                    endMonth = 12;
                }
                int endDay = endDayBox.getSelectedIndex();
                endDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(endYear, endMonth) < endDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + endMonth + "/" + endYear);
                    this.setVisible(false);
                }

                Date endDate = new Date(endYear, endMonth, endDay);

                //Creating RepeatType
                int repIndex = repeatBox.getSelectedIndex();
                RepeatType rep;
                if (repIndex == 0) {
                    rep = RepeatType.DAILY;
                } else if (repIndex == 1) {
                    rep = RepeatType.WEEKLY;
                } else {
                    rep = RepeatType.YEARLY;
                }

                //Creating appointment
                UntimedRepeatAppointment app = new UntimedRepeatAppointment(descText.getText(), startDate, endDate, rep);

                for (Date c : app.getDates()) {
                    Appointment app2 = new UntimedAppointment(app.toString(), c);
                    gui.getAllDates().add(app2);
                    gui.getDiary().add(app);
                }
                //gui.getDiary().add(app);
                gui.addToCalendar(app);
                gui.getListModel().addElement(app);
            }
        } else {

            if (timedCheck.isSelected()) {

                //Creating startDate
                int startYear = Integer.parseInt(yearText.getText());
                int startMonth = monthBox2.getSelectedIndex();
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = dayBox.getSelectedIndex();
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                //Creating startTime
                int startHourBox = startHour.getSelectedIndex();
                int startMinuteBox = startMin.getSelectedIndex();

                Time startTime = new Time(startHourBox, startMinuteBox);

                //Creating endTime
                int endHourBox = endHour.getSelectedIndex();
                int endMinBox = endMin.getSelectedIndex();

                Time endTime = new Time(endHourBox, endMinBox);

                TimedAppointment app = new TimedAppointment(descText.getText(), startDate, startTime, endTime);

                Appointment app2 = new UntimedAppointment(app.toString(), startDate);
                gui.getAllDates().add(app2);
                gui.getDiary().add(app);
                gui.addToCalendar(app);
                gui.getListModel().addElement(app);
            } else {

                int startYear = Integer.parseInt(yearText.getText());
                int startMonth = monthBox2.getSelectedIndex();
                if (startMonth == 0) {
                    startMonth = 12;
                }
                int startDay = dayBox.getSelectedIndex();
                startDay++;
                //Checking if that day exists in the month
                if (Date.daysInMonth(startYear, startMonth) < startDay) {
                    JOptionPane.showMessageDialog(rootPane, "You have entered the wrong day! There is no such day in " + startMonth + "/" + startYear);
                    this.setVisible(false);
                }

                Date startDate = new Date(startYear, startMonth, startDay);

                UntimedAppointment app = new UntimedAppointment(descText.getText(), startDate);

                gui.getAllDates().add(app);
                gui.getDiary().add(app);
                gui.addToCalendar(app);
                gui.getListModel().addElement(app);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new NewAppGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLabel;
    private javax.swing.JComboBox<String> dayBox;
    private javax.swing.JLabel desc;
    private javax.swing.JTextField descText;
    private javax.swing.JLabel dots;
    private javax.swing.JLabel dots2;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JComboBox<String> endDayBox;
    private javax.swing.JComboBox<String> endHour;
    private javax.swing.JLabel endLabel;
    private javax.swing.JComboBox<String> endMin;
    private javax.swing.JComboBox<String> endMonthBox;
    private javax.swing.JTextField endText;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> monthBox2;
    private javax.swing.JComboBox<String> repeatBox;
    private javax.swing.JCheckBox repeatCheck;
    private javax.swing.JLabel repeatType;
    private javax.swing.JComboBox<String> startHour;
    private javax.swing.JLabel startLabel;
    private javax.swing.JComboBox<String> startMin;
    private javax.swing.JCheckBox timedCheck;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables
}
