/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cm2100.diary;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/* GUI.java, created by Vladimir B.
*  Assessment Part 2 â€“ due 13 Jan 2020 */
@SuppressWarnings("ALL")
public class GUI extends javax.swing.JFrame {

    /**
     * ArrayList to store each button
     */
    private final ArrayList<String> dateButton;

    /**
     * Diary of Appointments
     */ 
    private final Diary diary;

    /**
     * All the dates on which each Appointment occurs. Useful for repeat
     * Appointments
     */
    private final ArrayList<Appointment> allDates;

    /**
     * ListModel to use in deisplating the appointments on selected date
     */
    private DefaultListModel listModel;

    /**
     * Creates new form GUI
     */
    public GUI() {
        listModel = new DefaultListModel();
        initComponents();
        dateButton = new ArrayList<>();
        diary = new Diary();
        allDates = new ArrayList<>();
    }

    /**
     * Gets all the dates on which each Appointment occurs
     *
     * @return ArrayList of Appointments
     */
    public ArrayList<Appointment> getAllDates() {
        return allDates;
    }

    /**
     * Gets diary
     *
     * @return Diary object
     */
    public Diary getDiary() {
        return diary;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mon = new javax.swing.JLabel();
        tue = new javax.swing.JLabel();
        wed = new javax.swing.JLabel();
        thu = new javax.swing.JLabel();
        fri = new javax.swing.JLabel();
        sat = new javax.swing.JLabel();
        sun = new javax.swing.JLabel();
        calendar = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        dateField = new javax.swing.JTextField();
        monthBox = new javax.swing.JComboBox<>();
        monthBack = new javax.swing.JButton();
        monthForward = new javax.swing.JButton();
        today = new javax.swing.JButton();
        keyword = new javax.swing.JLabel();
        keyText = new javax.swing.JTextField();
        newAppointment = new javax.swing.JButton();
        editAppointment = new javax.swing.JButton();
        deleteAppointment = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new JList(listModel);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        LoadDiary = new javax.swing.JMenuItem();
        SaveDiary = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calendar");
        setBackground(new java.awt.Color(51, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(102, 102, 102));
        mainPanel.setForeground(new java.awt.Color(102, 102, 102));

        mon.setBackground(new java.awt.Color(153, 153, 153));
        mon.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        mon.setForeground(new java.awt.Color(0, 0, 0));
        mon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mon.setText("Mon");

        tue.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tue.setForeground(new java.awt.Color(0, 0, 0));
        tue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tue.setText("Tue");

        wed.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        wed.setForeground(new java.awt.Color(0, 0, 0));
        wed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wed.setText("Wed");

        thu.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        thu.setForeground(new java.awt.Color(0, 0, 0));
        thu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        thu.setText("Thu");

        fri.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fri.setForeground(new java.awt.Color(0, 0, 0));
        fri.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fri.setText("Fri");

        sat.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sat.setForeground(new java.awt.Color(0, 0, 0));
        sat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sat.setText("Sat");

        sun.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sun.setForeground(new java.awt.Color(0, 0, 0));
        sun.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sun.setText("Sun");

        calendar.setBackground(new java.awt.Color(51, 51, 51));
        calendar.setForeground(new java.awt.Color(153, 153, 153));

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("-");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 51, 51));
        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 51, 51));
        jButton3.setText("1");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(51, 51, 51));
        jButton4.setText("2");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 102, 102));
        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(51, 51, 51));
        jButton5.setText("3");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(102, 102, 102));
        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(51, 51, 51));
        jButton6.setText("4");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(102, 102, 102));
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(51, 51, 51));
        jButton7.setText("5");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(102, 102, 102));
        jButton8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(51, 51, 51));
        jButton8.setText("6");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(102, 102, 102));
        jButton9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(51, 51, 51));
        jButton9.setText("7");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(102, 102, 102));
        jButton10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(51, 51, 51));
        jButton10.setText("8");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(102, 102, 102));
        jButton11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton11.setForeground(new java.awt.Color(51, 51, 51));
        jButton11.setText("9");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(102, 102, 102));
        jButton12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton12.setForeground(new java.awt.Color(51, 51, 51));
        jButton12.setText("10");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(102, 102, 102));
        jButton13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton13.setForeground(new java.awt.Color(51, 51, 51));
        jButton13.setText("11");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(102, 102, 102));
        jButton14.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton14.setForeground(new java.awt.Color(51, 51, 51));
        jButton14.setText("12");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(102, 102, 102));
        jButton15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton15.setForeground(new java.awt.Color(51, 51, 51));
        jButton15.setText("13");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(102, 102, 102));
        jButton16.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton16.setForeground(new java.awt.Color(51, 51, 51));
        jButton16.setText("14");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(102, 102, 102));
        jButton17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton17.setForeground(new java.awt.Color(51, 51, 51));
        jButton17.setText("15");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setBackground(new java.awt.Color(102, 102, 102));
        jButton18.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton18.setForeground(new java.awt.Color(51, 51, 51));
        jButton18.setText("16");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(102, 102, 102));
        jButton19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton19.setForeground(new java.awt.Color(51, 51, 51));
        jButton19.setText("17");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setBackground(new java.awt.Color(102, 102, 102));
        jButton20.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton20.setForeground(new java.awt.Color(51, 51, 51));
        jButton20.setText("18");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setBackground(new java.awt.Color(102, 102, 102));
        jButton21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton21.setForeground(new java.awt.Color(51, 51, 51));
        jButton21.setText("19");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setBackground(new java.awt.Color(102, 102, 102));
        jButton22.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton22.setForeground(new java.awt.Color(51, 51, 51));
        jButton22.setText("20");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setBackground(new java.awt.Color(102, 102, 102));
        jButton23.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton23.setForeground(new java.awt.Color(51, 51, 51));
        jButton23.setText("21");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setBackground(new java.awt.Color(102, 102, 102));
        jButton24.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton24.setForeground(new java.awt.Color(51, 51, 51));
        jButton24.setText("22");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jButton25.setBackground(new java.awt.Color(102, 102, 102));
        jButton25.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton25.setForeground(new java.awt.Color(51, 51, 51));
        jButton25.setText("23");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton26.setBackground(new java.awt.Color(102, 102, 102));
        jButton26.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton26.setForeground(new java.awt.Color(51, 51, 51));
        jButton26.setText("24");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setBackground(new java.awt.Color(102, 102, 102));
        jButton27.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton27.setForeground(new java.awt.Color(51, 51, 51));
        jButton27.setText("25");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton28.setBackground(new java.awt.Color(102, 102, 102));
        jButton28.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton28.setForeground(new java.awt.Color(51, 51, 51));
        jButton28.setText("26");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton29.setBackground(new java.awt.Color(102, 102, 102));
        jButton29.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton29.setForeground(new java.awt.Color(51, 51, 51));
        jButton29.setText("27");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton30.setBackground(new java.awt.Color(102, 102, 102));
        jButton30.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton30.setForeground(new java.awt.Color(51, 51, 51));
        jButton30.setText("28");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton31.setBackground(new java.awt.Color(102, 102, 102));
        jButton31.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton31.setForeground(new java.awt.Color(51, 51, 51));
        jButton31.setText("29");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton32.setBackground(new java.awt.Color(102, 102, 102));
        jButton32.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton32.setForeground(new java.awt.Color(51, 51, 51));
        jButton32.setText("30");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        jButton33.setBackground(new java.awt.Color(102, 102, 102));
        jButton33.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton33.setForeground(new java.awt.Color(51, 51, 51));
        jButton33.setText("31");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        jButton34.setBackground(new java.awt.Color(102, 102, 102));
        jButton34.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton34.setForeground(new java.awt.Color(51, 51, 51));
        jButton34.setText("-");
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });

        jButton35.setBackground(new java.awt.Color(102, 102, 102));
        jButton35.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton35.setForeground(new java.awt.Color(51, 51, 51));
        jButton35.setText("-");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });

        jButton36.setBackground(new java.awt.Color(102, 102, 102));
        jButton36.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton36.setForeground(new java.awt.Color(51, 51, 51));
        jButton36.setText("-");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });

        jButton37.setBackground(new java.awt.Color(102, 102, 102));
        jButton37.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton37.setForeground(new java.awt.Color(51, 51, 51));
        jButton37.setText("-");
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton37ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calendarLayout = new javax.swing.GroupLayout(calendar);
        calendar.setLayout(calendarLayout);
        calendarLayout.setHorizontalGroup(
            calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calendarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButton21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        calendarLayout.setVerticalGroup(
            calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calendarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton33, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton31, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton30, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton36, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dateField.setBackground(new java.awt.Color(204, 204, 204));
        dateField.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        dateField.setForeground(new java.awt.Color(51, 51, 51));
        dateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dateField.setText("2020");
        dateField.setToolTipText("");
        dateField.setBorder(null);
        dateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldActionPerformed(evt);
            }
        });

        monthBox.setBackground(new java.awt.Color(102, 102, 102));
        monthBox.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        monthBox.setForeground(new java.awt.Color(51, 51, 51));
        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov" }));
        monthBox.setSelectedIndex(1);
        monthBox.setBorder(null);
        monthBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthBoxActionPerformed(evt);
            }
        });

        monthBack.setBackground(new java.awt.Color(153, 153, 153));
        monthBack.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        monthBack.setText("<--");
        monthBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthBackActionPerformed(evt);
            }
        });

        monthForward.setBackground(new java.awt.Color(153, 153, 153));
        monthForward.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        monthForward.setText("-->");
        monthForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthForwardActionPerformed(evt);
            }
        });

        today.setBackground(new java.awt.Color(153, 153, 153));
        today.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        today.setText("Today");
        today.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayActionPerformed(evt);
            }
        });

        keyword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        keyword.setForeground(new java.awt.Color(0, 0, 0));
        keyword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        keyword.setText("Keyword :");

        keyText.setBackground(new java.awt.Color(204, 204, 204));
        keyText.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        newAppointment.setBackground(new java.awt.Color(153, 153, 153));
        newAppointment.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        newAppointment.setText("New Appointment");
        newAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAppointmentActionPerformed(evt);
            }
        });

        editAppointment.setBackground(new java.awt.Color(153, 153, 153));
        editAppointment.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        editAppointment.setText("Edit Appointment");
        editAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentActionPerformed(evt);
            }
        });

        deleteAppointment.setBackground(new java.awt.Color(153, 153, 153));
        deleteAppointment.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        deleteAppointment.setText("Delete Appointment");
        deleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointmentActionPerformed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(204, 204, 204));
        searchButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(51, 51, 51));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jList1.setBackground(new java.awt.Color(51, 51, 51));
        jList1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jList1.setForeground(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(274, 274, 274)
                                .addComponent(newAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthBack, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthForward, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(today)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(editAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(keyText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tue, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wed, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(thu, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fri, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sat, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sun, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mon)
                    .addComponent(tue)
                    .addComponent(wed)
                    .addComponent(thu)
                    .addComponent(fri)
                    .addComponent(sat)
                    .addComponent(sun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(calendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(keyText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(monthBox)
                        .addComponent(monthBack, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthForward, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(today, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(102, 102, 102));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(102, 102, 102));
        jMenuBar1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jMenuBar1.setOpaque(true);

        jMenu1.setBackground(new java.awt.Color(102, 102, 102));
        jMenu1.setForeground(new java.awt.Color(51, 51, 51));
        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        LoadDiary.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        LoadDiary.setForeground(new java.awt.Color(51, 51, 51));
        LoadDiary.setText("Load Diary");
        LoadDiary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDiaryActionPerformed(evt);
            }
        });
        jMenu1.add(LoadDiary);

        SaveDiary.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SaveDiary.setForeground(new java.awt.Color(51, 51, 51));
        SaveDiary.setText("Save Diary");
        SaveDiary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveDiaryActionPerformed(evt);
            }
        });
        jMenu1.add(SaveDiary);

        Exit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Exit.setForeground(new java.awt.Color(51, 51, 51));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.getAccessibleContext().setAccessibleName("MainPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Mehod that changes the dates displayed depending on year written in
     * JTextField and month selected in JComboBox
     *
     * @param evt Change of year in JTextField
     */
    private void dateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldActionPerformed
        // TODO add your handling code here:

        int index = monthBox.getSelectedIndex();
        //Test
        //JOptionPane.showMessageDialog(rootPane, index);

        if (index == 0) {
            index = 12;
        }
        int year = Integer.parseInt(dateField.getText());
        //Test
        //JOptionPane.showMessageDialog(rootPane, year);

        int daysInMonth = Date.daysInMonth(year, index);
        //Test
        //JOptionPane.showMessageDialog(rootPane, daysInMonth);

        int dayInWeek = Date.dayInWeek(year, index, 1);
        //Test
        //JOptionPane.showMessageDialog(rootPane, dayInWeek);

        int count2 = 1;
        for (int i = 0; i < 37; i++) {
            if (i < dayInWeek) {
                dateButton.add("-");
            } else if (i < daysInMonth + dayInWeek) {
                dateButton.add("" + count2);
                count2++;
            } else {
                dateButton.add("-");
            }
        }
        jButton1.setText(dateButton.get(0));
        jButton2.setText(dateButton.get(1));
        jButton3.setText(dateButton.get(2));
        jButton4.setText(dateButton.get(3));
        jButton5.setText(dateButton.get(4));
        jButton6.setText(dateButton.get(5));
        jButton7.setText(dateButton.get(6));
        jButton8.setText(dateButton.get(7));
        jButton9.setText(dateButton.get(8));
        jButton10.setText(dateButton.get(9));
        jButton11.setText(dateButton.get(10));
        jButton12.setText(dateButton.get(11));
        jButton13.setText(dateButton.get(12));
        jButton14.setText(dateButton.get(13));
        jButton15.setText(dateButton.get(14));
        jButton16.setText(dateButton.get(15));
        jButton17.setText(dateButton.get(16));
        jButton18.setText(dateButton.get(17));
        jButton19.setText(dateButton.get(18));
        jButton20.setText(dateButton.get(19));
        jButton21.setText(dateButton.get(20));
        jButton22.setText(dateButton.get(21));
        jButton23.setText(dateButton.get(22));
        jButton24.setText(dateButton.get(23));
        jButton25.setText(dateButton.get(24));
        jButton26.setText(dateButton.get(25));
        jButton27.setText(dateButton.get(26));
        jButton28.setText(dateButton.get(27));
        jButton29.setText(dateButton.get(28));
        jButton30.setText(dateButton.get(29));
        jButton31.setText(dateButton.get(30));
        jButton32.setText(dateButton.get(31));
        jButton33.setText(dateButton.get(32));
        jButton34.setText(dateButton.get(33));
        jButton35.setText(dateButton.get(34));
        jButton36.setText(dateButton.get(35));
        jButton37.setText(dateButton.get(36));

        dateButton.clear();

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Make all gray again
        for (JButton b : dates) {
            b.setBackground(Color.GRAY);
        }
        //Make red date
        for (JButton but : dates) {
            for (Appointment a : allDates) {
                Date d = a.getDate();
                if (year == d.getYear()) {
                    if (index == d.getMonth()) {
                        String day = Integer.toString(d.getDay());
                        if (but.getText().equals(day)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }


    }//GEN-LAST:event_dateFieldActionPerformed

    /**
     * Method that changes the dates displayed based on the today's date
     *
     * @param evt Button clicked
     */
    private void todayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todayActionPerformed
        // TODO add your handling code here:

        //Test
        //JOptionPane.showMessageDialog(rootPane, java.time.LocalDate.now());
        String date = java.time.LocalDate.now().toString();

        //Test
        //JOptionPane.showMessageDialog(rootPane, date);
        String year = date.substring(0, 4);

        //Test
        //JOptionPane.showMessageDialog(rootPane, year);
        String month = date.substring(5, 7);

        //Test
        //JOptionPane.showMessageDialog(rootPane, month);
        String day = date.substring(date.length() - 2);

        //Test
        //JOptionPane.showMessageDialog(rootPane, day); 
        dateField.setText(year);

        int monthInt = Integer.parseInt(month);
        if (monthInt != 12) {
            monthBox.setSelectedIndex(monthInt);
        } else {
            monthBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_todayActionPerformed

    /**
     * Changes the dates displayed based on month selected
     *
     * @param evt Selection of month in JComboBox
     */
    private void monthBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthBoxActionPerformed
        // TODO add your handling code here:
        int index = monthBox.getSelectedIndex();
        //Test
        //JOptionPane.showMessageDialog(rootPane, index);

        if (index == 0) {
            index = 12;
        }
        int year = Integer.parseInt(dateField.getText());
        //Test
        //JOptionPane.showMessageDialog(rootPane, year);

        int daysInMonth = Date.daysInMonth(year, index);
        //Test
        //JOptionPane.showMessageDialog(rootPane, daysInMonth);

        int dayInWeek = Date.dayInWeek(year, index, 1);
        //Test
        //JOptionPane.showMessageDialog(rootPane, dayInWeek);

        int count2 = 1;
        for (int i = 0; i < 37; i++) {
            if (i < dayInWeek) {
                dateButton.add("-");
            } else if (i < daysInMonth + dayInWeek) {
                dateButton.add("" + count2);
                count2++;
            } else {
                dateButton.add("-");
            }
        }
        jButton1.setText(dateButton.get(0));
        jButton2.setText(dateButton.get(1));
        jButton3.setText(dateButton.get(2));
        jButton4.setText(dateButton.get(3));
        jButton5.setText(dateButton.get(4));
        jButton6.setText(dateButton.get(5));
        jButton7.setText(dateButton.get(6));
        jButton8.setText(dateButton.get(7));
        jButton9.setText(dateButton.get(8));
        jButton10.setText(dateButton.get(9));
        jButton11.setText(dateButton.get(10));
        jButton12.setText(dateButton.get(11));
        jButton13.setText(dateButton.get(12));
        jButton14.setText(dateButton.get(13));
        jButton15.setText(dateButton.get(14));
        jButton16.setText(dateButton.get(15));
        jButton17.setText(dateButton.get(16));
        jButton18.setText(dateButton.get(17));
        jButton19.setText(dateButton.get(18));
        jButton20.setText(dateButton.get(19));
        jButton21.setText(dateButton.get(20));
        jButton22.setText(dateButton.get(21));
        jButton23.setText(dateButton.get(22));
        jButton24.setText(dateButton.get(23));
        jButton25.setText(dateButton.get(24));
        jButton26.setText(dateButton.get(25));
        jButton27.setText(dateButton.get(26));
        jButton28.setText(dateButton.get(27));
        jButton29.setText(dateButton.get(28));
        jButton30.setText(dateButton.get(29));
        jButton31.setText(dateButton.get(30));
        jButton32.setText(dateButton.get(31));
        jButton33.setText(dateButton.get(32));
        jButton34.setText(dateButton.get(33));
        jButton35.setText(dateButton.get(34));
        jButton36.setText(dateButton.get(35));
        jButton37.setText(dateButton.get(36));

        dateButton.clear();

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Make all gray again
        for (JButton b : dates) {
            b.setBackground(Color.GRAY);
        }
        //Make red date
        for (JButton but : dates) {
            for (Appointment a : allDates) {
                Date d = a.getDate();
                if (year == d.getYear()) {
                    if (index == d.getMonth()) {
                        String day = Integer.toString(d.getDay());
                        if (but.getText().equals(day)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_monthBoxActionPerformed

    /**
     * Opens new GUI which will create new Appointment
     *
     * @param evt Button pressed
     */
    private void newAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAppointmentActionPerformed
        // TODO add your handling code here:

        FormGUI form = new FormGUI(this);
        form.setVisible(true);

    }//GEN-LAST:event_newAppointmentActionPerformed

    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");

        listModel.clear();
        if (jButton3.getBackground().equals(Color.RED)) {
            //String output = "";
            String buttonNum = jButton3.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);

        }
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton13.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton13.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton13ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void monthBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthBackActionPerformed
        // TODO add your handling code here:
        int year = Integer.parseInt(dateField.getText());
        if (monthBox.getSelectedIndex() > 0) {
            if (monthBox.getSelectedIndex() == 1) {
                year--;
                dateField.setText(Integer.toString(year));
            }
            monthBox.setSelectedIndex(monthBox.getSelectedIndex() - 1);
        } else if (monthBox.getSelectedIndex() == 0) {
            monthBox.setSelectedIndex(11);
        }
        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Make all gray again
        for (JButton b : dates) {
            b.setBackground(Color.GRAY);
        }
        //Make red date
        int index = monthBox.getSelectedIndex();
        if (index == 0) {
            index = 12;
        }

        for (JButton but : dates) {
            for (Appointment a : allDates) {
                Date d = a.getDate();
                if (year == d.getYear()) {
                    if (index == d.getMonth()) {
                        String day = Integer.toString(d.getDay());
                        if (but.getText().equals(day)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_monthBackActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void monthForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthForwardActionPerformed
        // TODO add your handling code here:
        int year = Integer.parseInt(dateField.getText());
        if (monthBox.getSelectedIndex() < 11) {
            if (monthBox.getSelectedIndex() == 0) {
                year++;
                dateField.setText(Integer.toString(year));
            }
            monthBox.setSelectedIndex(monthBox.getSelectedIndex() + 1);
        } else if (monthBox.getSelectedIndex() == 11) {
            monthBox.setSelectedIndex(0);
        }

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        int index = monthBox.getSelectedIndex();

        if (index == 0) {
            index = 12;
        }

        //Make all gray again
        for (JButton b : dates) {
            b.setBackground(Color.GRAY);
        }
        //Make red date
        for (JButton but : dates) {
            for (Appointment a : allDates) {
                Date d = a.getDate();
                if (year == d.getYear()) {
                    if (index == d.getMonth()) {
                        String day = Integer.toString(d.getDay());
                        if (but.getText().equals(day)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_monthForwardActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        //textArea.setText("");
        listModel.clear();
        if (jButton4.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton4.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton5.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton5.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton6.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton6.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:

        //textArea.setText("");
        listModel.clear();
        if (jButton7.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton7.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton8.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton8.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton9.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton9.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton9ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton10.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton10.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton10ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton11.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton11.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton11ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton12.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton12.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton12ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton14.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton14.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton14ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton15.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton15.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton15ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton16.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton16.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton16ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton17.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton17.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton17ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton18.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton18.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton18ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton19.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton19.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton19ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton20.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton20.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton20ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        if (jButton21.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton21.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton21ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton22.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton22.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton22ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here
        //textArea.setText("");
        listModel.clear();
        if (jButton23.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton23.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton23ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton24.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton24.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton24ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton25.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton25.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton25ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton26.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton26.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton26ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton27.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton27.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton27ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton28.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton28.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton28ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton29.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton29.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton29ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton30.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton30.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton30ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton31.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton31.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton31ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton32.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton32.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton32ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton33.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton33.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton33ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton34.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton34.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton34ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton35.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton35.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton35ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton36.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton36.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            // output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton36ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton37ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton37.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton37.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton37ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton1.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton1.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);
                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Shows the appoitment on the given date
     *
     * @param evt Button pressed
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //textArea.setText("");
        listModel.clear();
        if (jButton2.getBackground().equals(Color.RED)) {
            String output = "";
            String buttonNum = jButton2.getText();
            String yearGiven = dateField.getText();
            int monthIndex = monthBox.getSelectedIndex();
            if (monthIndex == 0) {
                monthIndex = 12;
            }

            for (Appointment a : allDates) {
                Date d = a.getDate();
                String year = Integer.toString(d.getYear());
                int month = d.getMonth();
                String day = Integer.toString(d.getDay());
                if (year.equals(yearGiven)) {

                    if (month == monthIndex) {

                        if (buttonNum.equals(day)) {
                            //output += a.getDescription() + "\n";
                            int i = allDates.indexOf(a);
                            Object b = diary.getStore().get(i);
                            listModel.addElement(b);

                        }
                    }
                }
            }
            //textArea.setText(output);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Opens GUI for editting Appointment, opies all the data of the selected
     * Appointment and puts it into new GUI
     *
     * @param evt Button pressed
     */
    private void editAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentActionPerformed
        // TODO add your handling code here:

        Object a = jList1.getSelectedValue();
        if (a == null) {
            JOptionPane.showMessageDialog(rootPane, "Please select the appointment you want to change!");
        } else {
            //JOptionPane.showMessageDialog(rootPane, a);

            if (a instanceof UntimedRepeatAppointment) {

                //JOptionPane.showMessageDialog(rootPane, "This is Untimed Repeat Appointment");
                EditGUI edit = new EditGUI(this);
                edit.setVisible(true);

                String desc = ((UntimedRepeatAppointment) a).getDescription();
                edit.getDescText().setText(desc);

                Date date = ((UntimedRepeatAppointment) a).getStartDate();
                String year = Integer.toString(date.getYear());
                int month = date.getMonth();
                int day = date.getDay();
                edit.getYearText().setText(year);
                if (month == 12) {
                    month = 0;
                }
                edit.getMonthBox().setSelectedIndex(month);
                day--;
                edit.getDayBox().setSelectedIndex(day);

                edit.getRepeatCheck().setSelected(true);

                edit.getRepeatBox().setEnabled(true);
                RepeatType rep = ((UntimedRepeatAppointment) a).getRepeatType();
                int repIndex;
                if (rep.equals(RepeatType.DAILY)) {
                    repIndex = 0;
                } else if (rep.equals(RepeatType.WEEKLY)) {
                    repIndex = 1;
                } else {
                    repIndex = 2;
                }
                edit.getRepeatBox().setSelectedIndex(repIndex);

                Date date2 = ((UntimedRepeatAppointment) a).getEndDate();
                String year2 = Integer.toString(date2.getYear());
                int month2 = date2.getMonth();
                if (month2 == 12) {
                    month2 = 0;
                }
                int day2 = date2.getDay();
                day2--;

                edit.getEndText().setEnabled(true);
                edit.getEndText().setText(year2);
                edit.getEndMonthBox().setEnabled(true);
                edit.getEndMonthBox().setSelectedIndex(month2);
                edit.getEndDayBox().setEnabled(true);
                edit.getEndDayBox().setSelectedIndex(day2);
            } else if (a instanceof TimedRepeatAppointment) {
                //JOptionPane.showMessageDialog(rootPane, "This is Timed Repeat Appointment");

                EditGUI edit = new EditGUI(this);
                edit.setVisible(true);

                String desc = ((TimedRepeatAppointment) a).getDescription();
                edit.getDescText().setText(desc);

                Date date = ((TimedRepeatAppointment) a).getStartDate();
                String year = Integer.toString(date.getYear());
                int month = date.getMonth();
                int day = date.getDay();
                edit.getYearText().setText(year);
                if (month == 12) {
                    month = 0;
                }
                edit.getMonthBox().setSelectedIndex(month);
                day--;
                edit.getDayBox().setSelectedIndex(day);

                edit.getRepeatCheck().setSelected(true);

                edit.getRepeatBox().setEnabled(true);
                RepeatType rep = ((TimedRepeatAppointment) a).getRepeatType();
                int repIndex;
                if (rep.equals(RepeatType.DAILY)) {
                    repIndex = 0;
                } else if (rep.equals(RepeatType.WEEKLY)) {
                    repIndex = 1;
                } else {
                    repIndex = 2;
                }
                edit.getRepeatBox().setSelectedIndex(repIndex);

                Date date2 = ((TimedRepeatAppointment) a).getEndDate();
                String year2 = Integer.toString(date2.getYear());
                int month2 = date2.getMonth();
                if (month2 == 12) {
                    month2 = 0;
                }
                int day2 = date2.getDay();
                day2--;
                edit.getEndText().setEnabled(true);
                edit.getEndText().setText(year2);
                edit.getEndMonthBox().setEnabled(true);
                edit.getEndMonthBox().setSelectedIndex(month2);
                edit.getEndDayBox().setEnabled(true);
                edit.getEndDayBox().setSelectedIndex(day2);

                edit.getTimedCheck().setSelected(true);

                edit.getStartHour().setEnabled(true);
                edit.getStartMin().setEnabled(true);
                edit.getEndHour().setEnabled(true);
                edit.getEndMin().setEnabled(true);

                Time start = ((TimedRepeatAppointment) a).getStartTime();

                int sHour = start.getHour();
                int sMin = start.getMinute();
                edit.getStartHour().setSelectedIndex(sHour);
                edit.getStartMin().setSelectedIndex(sMin);

                Time end = ((TimedRepeatAppointment) a).getEndTime();

                int eHour = end.getHour();
                int eMin = end.getMinute();
                edit.getEndHour().setSelectedIndex(eHour);
                edit.getEndMin().setSelectedIndex(eMin);

            } else if (a instanceof UntimedAppointment) {
                //JOptionPane.showMessageDialog(rootPane, "This is Untimed Appointment");

                EditGUI edit = new EditGUI(this);
                edit.setVisible(true);

                String desc = ((UntimedAppointment) a).getDescription();
                edit.getDescText().setText(desc);

                Date date = ((UntimedAppointment) a).getDate();
                String year = Integer.toString(date.getYear());
                int month = date.getMonth();
                int day = date.getDay();
                edit.getYearText().setText(year);
                if (month == 12) {
                    month = 0;
                }
                edit.getMonthBox().setSelectedIndex(month);
                day--;
                edit.getDayBox().setSelectedIndex(day);

            } else if (a instanceof TimedAppointment) {
                //JOptionPane.showMessageDialog(rootPane, "This is Timed Appointment");

                EditGUI edit = new EditGUI(this);
                edit.setVisible(true);

                String desc = ((TimedAppointment) a).getDescription();
                edit.getDescText().setText(desc);

                Date date = ((TimedAppointment) a).getDate();
                String year = Integer.toString(date.getYear());
                int month = date.getMonth();
                int day = date.getDay();
                edit.getYearText().setText(year);
                if (month == 12) {
                    month = 0;
                }
                edit.getMonthBox().setSelectedIndex(month);
                day--;
                edit.getDayBox().setSelectedIndex(day);

                edit.getTimedCheck().setSelected(true);

                edit.getStartHour().setEnabled(true);
                edit.getStartMin().setEnabled(true);
                edit.getEndHour().setEnabled(true);
                edit.getEndMin().setEnabled(true);

                Time start = ((TimedAppointment) a).getStartTime();

                int sHour = start.getHour();
                int sMin = start.getMinute();
                edit.getStartHour().setSelectedIndex(sHour);
                edit.getStartMin().setSelectedIndex(sMin);

                Time end = ((TimedAppointment) a).getEndTime();

                int eHour = end.getHour();
                int eMin = end.getMinute();
                edit.getEndHour().setSelectedIndex(eHour);
                edit.getEndMin().setSelectedIndex(eMin);
            }
        }


    }//GEN-LAST:event_editAppointmentActionPerformed

    /**
     * Deletes the selected Appointment
     *
     * @param evt Button pressed
     */
    private void deleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointmentActionPerformed
        // TODO add your handling code here:
        int v = JOptionPane.showConfirmDialog(rootPane, "Delete selected Appointment?");
        if (v == 0) {
            Object a = jList1.getSelectedValue();
            if (a == null) {
                JOptionPane.showMessageDialog(rootPane, "Please select the appointment you want to delete!");
            }
            listModel.removeElement(a);

            int i = diary.getStore().indexOf(a);
            String desc = diary.getStore().get(i).getDescription();

            //JOptionPane.showMessageDialog(rootPane, diary.getStore());
            int diarySize = diary.getStore().size() - 1;

            //JOptionPane.showMessageDialog(rootPane, getAllDates());
            for (int y = 0; y <= diarySize; y++) {
                diary.getStore().remove(a);
            }

            if (a instanceof TimedRepeatAppointment) {

                for (Date c : ((TimedRepeatAppointment) a).getDates()) {
                    UntimedAppointment app2 = new UntimedAppointment(a.toString(), c);
                    getAllDates().remove(app2);
                }
            } else if (a instanceof UntimedRepeatAppointment) {
                //JOptionPane.showMessageDialog(rootPane, "This is UtimedRepeat App!");
                // JOptionPane.showMessageDialog(rootPane, "Dates that this appointment repeats");
                //JOptionPane.showMessageDialog(rootPane, ((UntimedRepeatAppointment) a).getDates());
                for (Date c : ((UntimedRepeatAppointment) a).getDates()) {
                    //JOptionPane.showMessageDialog(rootPane, "Appointments in getAllDates");
                    //JOptionPane.showMessageDialog(rootPane, getAllDates());
                    UntimedAppointment app2 = new UntimedAppointment(a.toString(), c);
                    //JOptionPane.showMessageDialog(rootPane, "Appointment to be removed from getAllDates ");
                    //JOptionPane.showMessageDialog(rootPane, app2);
                    getAllDates().remove(app2);
                    //JOptionPane.showMessageDialog(rootPane, "getAllDates after removal");
                }
            } else if (a instanceof TimedAppointment) {

                UntimedAppointment app2 = new UntimedAppointment(a.toString(), ((TimedAppointment) a).getDate());
                getAllDates().remove(app2);
            } else if (a instanceof UntimedAppointment) {
                getAllDates().remove(a);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Error!");
            }

            //JOptionPane.showMessageDialog(rootPane, diary.getStore());
            //JOptionPane.showMessageDialog(rootPane, getAllDates());
            this.removeFromCalendar();
        }

    }//GEN-LAST:event_deleteAppointmentActionPerformed

    /**
     * Seacrhes for appointment based on the text in JTextField and displays it
     *
     * @param evt Button pressed
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:

        listModel.clear();
        String searchText = keyText.getText();

        ArrayList<Appointment> result = new ArrayList<>();

        //Populating new ArrayList for further manipulations
        for (Appointment a : getDiary().findAppointments(searchText)) {
            result.add(a);
        }

        if (result.size() > 1) {
            List<Appointment> result2 = result.stream().distinct().collect(Collectors.toList());
            for (Appointment app : result2) {
                listModel.addElement(app);
            }
        } else {
            for (Appointment app : result) {
                listModel.addElement(app);
            }
        }
        result.clear();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Exits the application
     *
     * @param evt Button pressed
     */
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * Saves the diary into selected txt file
     *
     * @param evt Button pressed
     */
    private void SaveDiaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveDiaryActionPerformed
        // TODO add your handling code here:
        File f = null;

        JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            f = chooser.getSelectedFile();

        }

        Diary diaryTemp = new Diary();
        List<Appointment> edittedDiary = getDiary().getStore().stream().distinct().collect(Collectors.toList());

        for (Appointment a : edittedDiary) {
            diaryTemp.add(a);
        }

        diaryTemp.save(f);
        diaryTemp.clear();
    }//GEN-LAST:event_SaveDiaryActionPerformed

    /**
     * Loads the diary from a txt file and displays it in GUI
     *
     * @param evt Button pressed
     */
    private void LoadDiaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDiaryActionPerformed
        // TODO add your handling code here:
        Diary diaryTemp = new Diary();
        File f = null;

        JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            f = chooser.getSelectedFile();

        }
        diaryTemp.load(f);
        //JOptionPane.showMessageDialog(rootPane, diaryTemp);

        for (Appointment a : diaryTemp.getStore()) {
            //Make insance of and then populate current diary

            if (a instanceof RepeatAppointment) {
                //JOptionPane.showMessageDialog(rootPane, a + " is Repeat appointment");

                for (Date d : ((RepeatAppointment) a).getDates()) {
                    if (a instanceof TimedRepeatAppointment) {
                        //JOptionPane.showMessageDialog(rootPane, a + " is TimedRepeatAppointment");
                        getDiary().getStore().add(a);
                        UntimedAppointment app2 = new UntimedAppointment(a.getDescription(), d);
                        getAllDates().add(app2);
                        addToCalendar((TimedRepeatAppointment) a);
                    } else {
                        //JOptionPane.showMessageDialog(rootPane, a + " is UntimedRepeatAppointment");
                        getDiary().getStore().add(a);
                        UntimedAppointment app2 = new UntimedAppointment(a.getDescription(), d);
                        getAllDates().add(app2);
                        addToCalendar((UntimedRepeatAppointment) a);
                    }
                }
            } else {
                //JOptionPane.showMessageDialog(rootPane, a + "is not RepeatAppointment");
                getDiary().getStore().add(a);
                UntimedAppointment app2 = new UntimedAppointment(a.getDescription(), a.getDate());
                getAllDates().add(app2);
                addToCalendar((UntimedAppointment) a);
            }
        }
        diaryTemp.clear();

    }//GEN-LAST:event_LoadDiaryActionPerformed

    /**
     * Method for TimedRepeatAppointments that adds the data to a calendar
     *
     * @param app TimedRepeatAppointment
     */
    public void addToCalendar(TimedRepeatAppointment app) {

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Given
        int yearGiven = Integer.parseInt(dateField.getText());
        //JOptionPane.showMessageDialog(rootPane, yearGiven);
        int monthIndex = monthBox.getSelectedIndex();
        if (monthIndex == 0) {
            monthIndex = 12;
        }

        for (Date d : app.getDates()) {
            int yearTaken = d.getYear();
            //JOptionPane.showMessageDialog(rootPane, yearTaken);
            int monthTaken = d.getMonth();
            //JOptionPane.showMessageDialog(rootPane, monthTaken);
            String dayTaken = Integer.toString(d.getDay());
            //JOptionPane.showMessageDialog(rootPane, dayTaken);

            if (yearGiven == yearTaken) {
                //JOptionPane.showMessageDialog(rootPane, (yearGiven == yearTaken));
                if (monthIndex == monthTaken) {
                    //JOptionPane.showMessageDialog(rootPane, (monthIndex == monthTaken));
                    for (JButton but : dates) {
                        //JOptionPane.showMessageDialog(rootPane, (but.getText()));
                        //JOptionPane.showMessageDialog(rootPane, (dayTaken));
                        if (but.getText().equals(dayTaken)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }

        dates.clear();
    }

    /**
     * Method for UntimedRepeatAppointments that adds the data to a calendar
     *
     * @param app UntimedRepeatAppointment
     */
    public void addToCalendar(UntimedRepeatAppointment app) {

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Given
        int yearGiven = Integer.parseInt(dateField.getText());
        //JOptionPane.showMessageDialog(rootPane, yearGiven);
        int monthIndex = monthBox.getSelectedIndex();
        if (monthIndex == 0) {
            monthIndex = 12;
        }

        for (Date d : app.getDates()) {
            int yearTaken = d.getYear();
            //JOptionPane.showMessageDialog(rootPane, yearTaken);
            int monthTaken = d.getMonth();
            //JOptionPane.showMessageDialog(rootPane, monthTaken);
            String dayTaken = Integer.toString(d.getDay());
            //JOptionPane.showMessageDialog(rootPane, dayTaken);

            if (yearGiven == yearTaken) {
                //JOptionPane.showMessageDialog(rootPane, (yearGiven == yearTaken));
                if (monthIndex == monthTaken) {
                    //JOptionPane.showMessageDialog(rootPane, (monthIndex == monthTaken));
                    for (JButton but : dates) {
                        //JOptionPane.showMessageDialog(rootPane, (but.getText()));
                        //JOptionPane.showMessageDialog(rootPane, (dayTaken));
                        if (but.getText().equals(dayTaken)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }

        dates.clear();
    }

    /**
     * Method for non repeat appointments that adds the date to a calendar
     *
     * @param app Appointment to add
     */
    public void addToCalendar(Appointment app) {

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Given
        int yearGiven = Integer.parseInt(dateField.getText());
        //JOptionPane.showMessageDialog(rootPane, yearGiven);
        int monthIndex = monthBox.getSelectedIndex();
        if (monthIndex == 0) {
            monthIndex = 12;
        }

        Date d = app.getDate();
        int yearTaken = d.getYear();
        //JOptionPane.showMessageDialog(rootPane, yearTaken);
        int monthTaken = d.getMonth();
        //JOptionPane.showMessageDialog(rootPane, monthTaken);
        String dayTaken = Integer.toString(d.getDay());
        //JOptionPane.showMessageDialog(rootPane, dayTaken);

        if (yearGiven == yearTaken) {
            //JOptionPane.showMessageDialog(rootPane, (yearGiven == yearTaken));
            if (monthIndex == monthTaken) {
                //JOptionPane.showMessageDialog(rootPane, (monthIndex == monthTaken));
                for (JButton but : dates) {
                    //JOptionPane.showMessageDialog(rootPane, (but.getText()));
                    //JOptionPane.showMessageDialog(rootPane, (dayTaken));
                    if (but.getText().equals(dayTaken)) {
                        but.setBackground(Color.RED);
                    }
                }
            }
        }

        dates.clear();
    }

    /**
     * Method for making the date gray if there are no other appointments
     */
    public void removeFromCalendar() {

        ArrayList<JButton> dates = new ArrayList<>();

        dates.add(jButton1);
        dates.add(jButton2);
        dates.add(jButton3);
        dates.add(jButton4);
        dates.add(jButton5);
        dates.add(jButton6);
        dates.add(jButton7);
        dates.add(jButton8);
        dates.add(jButton9);
        dates.add(jButton10);
        dates.add(jButton11);
        dates.add(jButton12);
        dates.add(jButton13);
        dates.add(jButton14);
        dates.add(jButton15);
        dates.add(jButton16);
        dates.add(jButton17);
        dates.add(jButton18);
        dates.add(jButton19);
        dates.add(jButton20);
        dates.add(jButton21);
        dates.add(jButton22);
        dates.add(jButton23);
        dates.add(jButton24);
        dates.add(jButton25);
        dates.add(jButton26);
        dates.add(jButton27);
        dates.add(jButton28);
        dates.add(jButton29);
        dates.add(jButton30);
        dates.add(jButton31);
        dates.add(jButton32);
        dates.add(jButton33);
        dates.add(jButton34);
        dates.add(jButton35);
        dates.add(jButton36);
        dates.add(jButton37);

        //Given
        int yearGiven = Integer.parseInt(dateField.getText());
        //JOptionPane.showMessageDialog(rootPane, yearGiven);

        for (JButton but : dates) {
            but.setBackground(Color.GRAY);
        }
        //Store new dates

        int index = monthBox.getSelectedIndex();
        if (index == 0) {
            index = 12;
        }

        for (JButton but : dates) {
            for (Appointment a : allDates) {
                Date d = a.getDate();
                if (yearGiven == d.getYear()) {
                    if (index == d.getMonth()) {
                        String day = Integer.toString(d.getDay());
                        if (but.getText().equals(day)) {
                            but.setBackground(Color.RED);
                        }
                    }
                }
            }
        }

        dates.clear();
    }

    /**
     * Gets the listModel
     *
     * @return ListModel
     */
    public DefaultListModel getListModel() {
        return listModel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI mainGUI = new GUI();
                mainGUI.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem LoadDiary;
    private javax.swing.JMenuItem SaveDiary;
    private javax.swing.JPanel calendar;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton deleteAppointment;
    private javax.swing.JButton editAppointment;
    private javax.swing.JLabel fri;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyText;
    private javax.swing.JLabel keyword;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel mon;
    private javax.swing.JButton monthBack;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JButton monthForward;
    private javax.swing.JButton newAppointment;
    private javax.swing.JLabel sat;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel sun;
    private javax.swing.JLabel thu;
    private javax.swing.JButton today;
    private javax.swing.JLabel tue;
    private javax.swing.JLabel wed;
    // End of variables declaration//GEN-END:variables
}
